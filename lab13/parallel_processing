#!/usr/bin/env python3

from collections import deque
from multiprocessing.pool import ThreadPool

import cv2 as cv

import sys

VIDEO_SOURCE = "../imgs/traffic_ip_camera.mp4"

def meta_info( cap ):
    fps = cap.get(cv.CAP_PROP_FPS)      # OpenCV v2.x used "CV_CAP_PROP_FPS"
    frame_count = int(cap.get(cv.CAP_PROP_FRAME_COUNT))
    duration = frame_count/fps

    print('fps = ' + str(fps))
    print('number of frames = ' + str(frame_count))
    print('duration (S) = ' + str(duration))
    minutes = int(duration/60)
    seconds = duration%60
    print('duration (M:S) = ' + str(minutes) + ':' + str(seconds))

def process_frame(frame):
    # some intensive computation...
    frame = cv.medianBlur(frame, 19)
    return frame


if __name__ == '__main__':
    # Setup.
    cap = cv.VideoCapture(VIDEO_SOURCE)
    thread_num = cv.getNumberOfCPUs()
    pool = ThreadPool(processes=thread_num)
    pending_task = deque()

    meta_info( cap )

    multiprocessing = int(sys.argv[1])

#    start = cv.getTickCount()
    while True:

        if multiprocessing:
            # Consume the queue.
            while len(pending_task) > 0 and pending_task[0].ready():
                res = pending_task.popleft().get()
                cv.imshow('threaded video', res)

            # Populate the queue.
            if len(pending_task) < thread_num:
                frame_got, frame = cap.read()
                if frame_got:
                    task = pool.apply_async(process_frame, (frame.copy(),))
                    pending_task.append(task)
        else:
            frame_got, frame = cap.read()
            cv.imshow( 'single_thread', process_frame( frame ) )

        # Show preview.
        if cv.waitKey(1) == 27 or not frame_got:
            break

#    fps = cv.getTickFrequency() / (cv.getTickCount() - start);
#    print(fps)

